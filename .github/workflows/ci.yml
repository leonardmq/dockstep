name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.25.2']
        node-version: ['20']

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install UI dependencies
        working-directory: ui
        run: npm ci

      - name: Build UI
        working-directory: ui
        run: npm run build

      - name: Verify UI build
        run: |
          if [ ! -d "ui/dist" ]; then
            echo "Error: UI dist directory not found"
            exit 1
          fi
          echo "UI build verified successfully"

      - name: Run Go tests
        run: go test -v ./...

      - name: Run Go vet
        run: go vet ./...

      - name: Run Go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Build CLI
        run: |
          mkdir -p bin
          CGO_ENABLED=0 go build -trimpath -o bin/dockstep ./cmd/dockstep

      - name: Verify CLI build
        run: |
          if [ ! -f "bin/dockstep" ]; then
            echo "Error: CLI binary not found"
            exit 1
          fi
          echo "CLI build verified successfully"

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Install UI dependencies
        working-directory: ui
        run: npm ci

      - name: Run UI linting
        working-directory: ui
        run: |
          # Check if TypeScript compiles without errors
          npx tsc --noEmit
          echo "TypeScript compilation check passed"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Run Go linting
        run: |
          # Install golangci-lint
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
          
          # Run linter
          $(go env GOPATH)/bin/golangci-lint run --timeout=5m
